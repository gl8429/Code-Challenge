/**

Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

For example:
Given the following binary tree,
   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
You should return [1, 3, 4].

*/

// Recursive

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> result = new ArrayList<Integer>();
        rightSideView(root, result, 0);
        return result;
    }
    
    public void rightSideView(TreeNode current, List<Integer> result, int depth) {
        if (current == null) return;
        if (depth == result.size()) result.add(current.val);
        rightSideView(current.right, result, depth + 1);
        rightSideView(current.left, result, depth + 1);
    }
}

// Iterative

public class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        if(root == null){
            return new ArrayList<Integer>();
        }

        List<Integer> result = new ArrayList<Integer>();
        Stack<NodeWithDep> stack = new Stack<NodeWithDep>();

        NodeWithDep nwdRoot = new NodeWithDep(root, 0);
        stack.push(nwdRoot);
        while(!stack.isEmpty()){
            NodeWithDep nwd = stack.pop(); 
            TreeNode curr = nwd.node;
            if(nwd.depth == result.size()){
                result.add(curr.val);
            }
            if(curr.left != null){
                stack.push(new NodeWithDep(curr.left, nwd.depth + 1));
            }
            if(curr.right != null){
                stack.push(new NodeWithDep(curr.right, nwd.depth + 1));
            }
        }
        return result;
    }

    class NodeWithDep{
        TreeNode node;
        int depth;
        NodeWithDep(TreeNode node, int depth){
            this.node = node;
            this.depth = depth;
        }
    }

}
