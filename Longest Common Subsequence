/**

Given two string sequences, write an algo­rithm to find the length of
longest sub­se­quence present in both of them.

String A = "acbaed";
String B = "abcadf";

Longest Common Subsequence(LCS):     acad, Length: 4
*/

// Dynamic Programming, O(n^2)

public int find(char[] A, char[] B) {
	int lenA = A.length, lenB = B.length;
	int[][] LCS = new int[lenA + 1][lenB + 1];
	for (int i = 0; i < lenA; i++) LCS[i][0] = 0;
	for (int j = 0; j < lenB; j++) LCS[0][j] = 0;
	for (int i = 1; i <= lenA; i++) {
		for (int j = 1; j <= lenB; j++) {
			if (A[i - 1] == B[i - 1]) LCS[i][j] = 1 + LCS[i - 1][j - 1];
			else LCS[i][j] = Math.max(LCS[i - 1][j], LCS[i][j - 1]);
		}
	}
	return LSC[lenA][lenB];
}
