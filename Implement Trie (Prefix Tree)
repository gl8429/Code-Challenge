/*

Implement a trie with insert, search, and startsWith methods.

Note:
You may assume that all inputs are consist of lowercase letters a-z.

*/

class TrieNode {
    TrieNode[] children;
    boolean isEnd;
    
    // Initialize your data structure here.
    public TrieNode() {
        children = new TrieNode[26];
    }
}

public class Trie {
    private TrieNode root;

    public Trie() {
        root = new TrieNode();
    }

    // Inserts a word into the trie.
    public void insert(String word) {
        insert(word, root, 0);
    }
    
    public void insert(String word, TrieNode root, int index) {
        if (index == word.length()) {
            root.isEnd = true;
            return;
        }
        int lct = word.charAt(index) - 'a';
        if (root.children[lct] == null) {
            root.children[lct] = new TrieNode();
        }
        insert(word, root.children[lct], index + 1);
    }

    // Returns if the word is in the trie.
    public boolean search(String word) {
        return search(word, root, 0);
    }
    
    public boolean search(String word, TrieNode root, int index) {
        if (index == word.length()) return root.isEnd;
        int lct = word.charAt(index) - 'a';
        return root.children[lct] != null && search(word, root.children[lct], index + 1);
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    public boolean startsWith(String prefix) {
        return startsWith(prefix, root, 0);
    }
    
    public boolean startsWith(String prefix, TrieNode root, int index) {
        if (index == prefix.length()) return true;
        int lct = prefix.charAt(index) - 'a';
        return root.children[lct] != null && startsWith(prefix, root.children[lct], index + 1);
    }
}

// Your Trie object will be instantiated and called as such:
// Trie trie = new Trie();
// trie.insert("somestring");
// trie.search("key");
