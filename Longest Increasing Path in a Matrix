/**

Given an integer matrix, find the length of the longest increasing path.

From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).

Example 1:

nums = [
  [9,9,4],
  [6,6,8],
  [2,1,1]
]
Return 4
The longest increasing path is [1, 2, 6, 9].

Example 2:

nums = [
  [3,4,5],
  [3,2,6],
  [2,2,1]
]
Return 4
The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.

*/

public class Solution {
    public int longestIncreasingPath(int[][] matrix) {
        if (matrix == null || matrix.length == 0) return 0;
        int[][] dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        int[][] map = new int[matrix.length][matrix[0].length];
        int max = 1;
        for (int i = 0; i < matrix.length; ++i) {
            for (int j = 0; j < matrix[0].length; ++j) {
                int len = dfs(matrix, dirs, i, j, map);
                max = Math.max(len, max);
                
            }
        }
        return max;
    }
    
    public int dfs(int[][] matrix, int[][] dirs, int row, int col, int[][] map) {
        if (map[row][col] != 0) return map[row][col];
        int max = 1;
        for (int[] dir : dirs) {
            int x = row + dir[0], y = col + dir[1];
            if(x < 0 || x >= matrix.length || y < 0 || y >= matrix[0].length || matrix[x][y] <= matrix[row][col]) continue;
            int len = 1 + dfs(matrix, dirs, x, y, map);
            max = Math.max(max, len);
        }
        map[row][col] = max;
        return max;
    }
}
