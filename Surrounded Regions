/**

Given a 2D board containing 'X' and 'O', capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

For example,
X X X X
X O O X
X X O X
X O X X
After running your function, the board should be:

X X X X
X X X X
X X X X
X O X X

*/

public class Solution {
    public void solve(char[][] board) {
        if (board.length == 0) return;
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (i == 0 || j == 0 || i == board.length - 1 || j == board[0].length - 1) {
                    if (board[i][j] == 'O') {
                        Queue<Integer> queue = new LinkedList<Integer>();
                        board[i][j] = '1';
                        queue.add(i * board[0].length + j);
                        while (!queue.isEmpty()) {
                            int cur = queue.poll();
                            int x = cur / board[0].length;
                            int y = cur % board[0].length;
                            if (y + 1 < board[0].length && board[x][y + 1] == 'O') {
                                queue.add(cur + 1);
                                board[x][y + 1] = '1';
                            }
                            if (x + 1 < board.length && board[x + 1][y] == 'O') {
                                queue.add(cur + board[0].length);
                                board[x + 1][y] = '1';
                            }
                            if (y - 1 >= 0 && board[x][y - 1]=='O') {
                                queue.add(cur - 1);
                                board[x][y - 1] = '1';
                            }
                            if (x - 1 >= 0 && board[x - 1][y]=='O') {
                                queue.add(cur - board[0].length);
                                board[x - 1][y] = '1';
                            }
                        }
                    }
                }
            }
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == 'O') board[i][j] = 'X';
                if (board[i][j] == '1') board[i][j] = 'O';
            }
        }
    }
}
