/*

Given an unsorted array nums, reorder it in-place such that nums[0] <= nums[1] >= nums[2] <= nums[3]....

For example, given nums = [3, 5, 2, 1, 6, 4], one possible answer is [1, 6, 2, 5, 3, 4].

*/

// Solution 1, O(n)

public class Solution {
    public void wiggleSort(int[] nums) {
        for (int i = 0; i < nums.length; i++) {
            if (i % 2 == 1) {
                if (nums[i - 1]> nums[i]) swap(nums, i);
            } else if (i != 0 && nums[i] > nums[i - 1]) swap(nums, i);
        }
    }
    
    public void swap(int[]nums, int i) {
        int tmp = nums[i];
        nums[i] = nums[i - 1];
        nums[i - 1] = tmp;
    }
}

// Solution 2, sort first. O(nlog(n))

public void wiggleSort(int[] nums) {
   if (nums == null || nums.length == 0) return;
   Arrays.sort(nums);
   for (int i = 1; i < nums.length - 1; i += 2) {
       int tmp = nums[i];
       nums[i] = nums[i + 1];
       nums[i + 1] = tmp;
   } 
}
