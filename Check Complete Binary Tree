/**

A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible. See following examples.

The following trees are examples of Complete Binary Trees
    1
  /   \
 2     3
  
       1
    /    \
   2       3
  /
 4

       1
    /    \
   2      3
  /  \    /
 4    5  6
The following trees are examples of Non-Complete Binary Trees
    1
      \
       3
  
       1
    /    \
   2       3
    \     /  \   
     4   5    6

       1
    /    \
   2      3
         /  \
        4    5

*/

// Iteration

    public boolean iterationCheck(TreeNode root) {
        if (root == null) return true;
        Queue<TreeNode> queue = new LinkedList<>();
        boolean flag = false;
        queue.offer(root);
        while (!queue.isEmpty()) {
            TreeNode cur = queue.poll();
            if (cur.left != null) {
                if (flag) return false;
                queue.offer(cur.left);
            } else {
                flag = true;
            }
            if (cur.right != null) {
                if (flag) return false;
                queue.offer(cur.right);
            } else {
                flag = true;
            }
        }
        return true;
    }

// Recrusion

    public boolean recursionCheck(TreeNode root) {
        int nodesNumber = countNodes(root);
        return recursionCheck(root, 0, nodesNumber);
    }

    public boolean recursionCheck(TreeNode root, int index, int numbers) {
        if (root == null) return true;
        if (index >= numbers) return false;
        return recursionCheck(root.left, index * 2 + 1, numbers) &&
                recursionCheck(root.right, index * 2 + 2, numbers);
    }

    public int countNodes(TreeNode root) {
        if (root == null) return 0;
        return 1 + countNodes(root.left) + countNodes(root.right);
    }
