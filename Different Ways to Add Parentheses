/**

Given a string of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. The valid operators are +, - and *.


Example 1
Input: "2-1-1".

((2-1)-1) = 0
(2-(1-1)) = 2
Output: [0, 2]


Example 2
Input: "2*3-4*5"

(2*(3-(4*5))) = -34
((2*3)-(4*5)) = -14
((2*(3-4))*5) = -10
(2*((3-4)*5)) = -10
(((2*3)-4)*5) = 10
Output: [-34, -14, -10, -10, 10]

*/

// Recursive
public class Solution {
    public List<Integer> diffWaysToCompute(String input) {
        List<Integer> result = new ArrayList<Integer>();
        for (int i = 0; i < input.length(); ++i) {
            char cur = input.charAt(i);
            if (cur == '+' || cur == '-' || cur == '*') {
                List<Integer> result1 = diffWaysToCompute(input.substring(0, i));
                List<Integer> result2 = diffWaysToCompute(input.substring(i + 1));
                for (int p : result1) {
                    for (int q : result2) {
                        if (cur == '+') result.add(p + q);
                        else if (cur == '-') result.add(p - q);
                        else result.add(p * q);
                    }
                }
            }
        }
        if (result.isEmpty()) {
            result.add(Integer.parseInt(input));
        }
        return result;
    }
}

// HashMap
public class Solution {
    public List<Integer> diffWaysToCompute(String input) {
        Map<String, List<Integer>> map = new HashMap<String, List<Integer>>();
        helper(input, map);
        return map.get(input);
    }

    public List<Integer> helper(String input, Map<String, List<Integer>> map) {
        List<Integer> result = new ArrayList<Integer>();
        for (int i = 0; i < input.length(); ++i) {
            char cur = input.charAt(i);
            if (cur == '+' || cur == '-' || cur == '*') {
                String left = input.substring(0, i);
                String right = input.substring(i + 1);
                List<Integer> result1 = map.containsKey(left) ? map.get(left) : helper(left, map);
                List<Integer> result2 = map.containsKey(right) ? map.get(right) : helper(right, map);
                for (int p : result1) {
                    for (int q : result2) {
                        if (cur == '+') result.add(p + q);
                        else if (cur == '-') result.add(p - q);
                        else result.add(p * q);
                    }
                }
            }
        }
        if (result.isEmpty()) {
            result.add(Integer.parseInt(input));
        }
        map.put(input, result);
        return result;
    }
}
