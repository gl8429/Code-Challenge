/*

Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), find the minimum number of conference rooms required.

For example,
Given [[0, 30],[5, 10],[15, 20]],
return 2.

*/

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */

// Greedy algorithm

public class Solution {
    public int minMeetingRooms(Interval[] intervals) {
        if (intervals == null || intervals.length == 0) return 0;
        if (intervals.length == 1) return 1;
        Arrays.sort(intervals, new Comparator<Interval>() {
            @Override
            public int compare(Interval L1, Interval L2) {
                return L1.start - L2.start;
            }
        });
        return greedyHelper(new ArrayList(Arrays.asList(intervals)));
    }
    
    private int greedyHelper(List<Interval> list) {
        if (list.size() == 0) return 0;
        List<Interval> current = new ArrayList<Interval>();
        Interval pre = list.get(0);
        for (int i = 1; i < list.size(); ++i) {
            Interval iter = list.get(i);
            if (iter.start < pre.end) current.add(iter);
            else pre = iter;
        }
        return 1 + greedyHelper(current);
    }
}
