/**

Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

For example,
There exist two distinct solutions to the 4-queens puzzle:

[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]

*/

public class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> res = new ArrayList<List<String>>();
        char[][] board = new char[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = '.';
            }
        }
        dfs(res, board, 0);
        return res;
    }
    
    public void dfs(List<List<String>> res, char[][] board, int colIndex) {
        if (colIndex == board.length) {
            res.add(construct(board));
            return;
        }
        for (int row = 0; row < board.length; row++) {
            if (validate(board, row, colIndex)) {
                board[row][colIndex] = 'Q';
                dfs(res, board, colIndex+1);
                board[row][colIndex] = '.';
            }
        }
    }
    
    public boolean validate(char[][] board, int row, int col) {
        for (int i = 0; i < board.length; i++)
            for (int j = 0; j < col; j++)
                if (board[i][j] == 'Q' && (row + j == col + i || row + col == i + j || row == i))
                    return false;
        return true;
    }
    
    public List<String> construct(char[][] board) {
        List<String> res = new ArrayList<String>();
        for (int i = 0; i < board.length; i++) {
            String s = new String(board[i]);
            res.add(s);
        }
        return res;
    }
}
