/**

Given a binary tree, collect a tree's nodes as if you were doing this: Collect and remove all leaves, repeat until the tree is empty.

Example:
Given binary tree
          1
         / \
        2   3
       / \
      4   5
Returns [4, 5, 3], [2], [1].

Explanation:
1. Removing the leaves [4, 5, 3] would result in this tree:

          1
         /
        2
2. Now removing the leaf [2] would result in this tree:

          1
3. Now removing the leaf [1] would result in the empty tree:

          []
Returns [4, 5, 3], [2], [1].

*/

// Naive Solution, Time: O(n^2)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> findLeaves(TreeNode root) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> leaves = new ArrayList<Integer>();
        while (root != null) {
            if (dfs(root, leaves)) root = null;
            res.add(leaves);
            leaves = new ArrayList<Integer>();
        }
        return res;
    }

    public boolean dfs(TreeNode root, List<Integer> leaves) {
        if (root.left == null && root.right == null) {
            leaves.add(root.val);
            return true;
        }
        if (root.left != null) {
            if (dfs(root.left, leaves)) root.left = null;
        }
        if (root.right != null) {
            if (dfs(root.right, leaves)) root.right = null;
        }
        return false;
    }
}

// Time O(n)
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> findLeaves(TreeNode root) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        dfs(root, res);
        return res;
    }

    public int dfs(TreeNode root, List<List<Integer>> leaves) {
        if (root == null) return -1;
        int leftLevel = dfs(root.left, leaves);
        int rightLevel = dfs(root.right, leaves);
        int level = Math.max(leftLevel, rightLevel) + 1;
        if (leaves.size() == level) leaves.add(new ArrayList<Integer>());
        leaves.get(level).add(root.val);
        root.left = root.right = null;
        return level;
    }
}
