/*

Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:
Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].

Example 2:
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].

This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].

*/

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */

// Convert it to a iterator first, then check whether new interval has overlap with one,
//     if so, merge these two intervals and update the new interval, then remove the previous one
//     otherwise, just insert into the iterator.

public class Solution {
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        Interval cur;
        ListIterator<Interval> iter = intervals.listIterator();
        while (iter.hasNext()) {
            cur = iter.next();
            if (newInterval.end < cur.start) {

		// Notice: backwards one step and insert it.
                iter.previous();
                iter.add(newInterval);
                return intervals;
            } else if (newInterval.start <= cur.end) {
                newInterval.start = Math.min(newInterval.start, cur.start);
                newInterval.end = Math.max(newInterval.end, cur.end);
                iter.remove();
            }
        }
        intervals.add(newInterval);
        return intervals;
    }
}
