/*

Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).

For example,
S = "ADOBECODEBANC"
T = "ABC"
Minimum window is "BANC".

Note:
If there is no such window in S that covers all characters in T, return the empty string "".

If there are multiple such windows, you are guaranteed that there will always be only one unique minimum window in S.

*/

// HashMap + two pointers---sliding window
// Time Complexity: On()

public class Solution {
    public String minWindow(String s, String t) {
        int begin = 0, end = 0;
	// count denotes how many characters has not been matched
        int count = t.length();
        int distance = Integer.MAX_VALUE;
        int[] target = new int[256];
        int head = 0;

	// initialize hashmap
        for (int i = 0; i < t.length(); ++i) target[t.charAt(i)]++;
        while (end < s.length()) {
            if (target[s.charAt(end++)]-- > 0) count--;
            while (count == 0) {
                if (end - begin < distance) {
                    distance = end - begin;
                    head = begin;
                }
                if (target[s.charAt(begin++)]++ == 0) count++;
            }
        }
        return distance == Integer.MAX_VALUE ? "" : s.substring(head, head + distance);
    }
}
