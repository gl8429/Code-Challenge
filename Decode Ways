/*

A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given an encoded message containing digits, determine the total number of ways to decode it.

For example,
Given encoded message "12", it could be decoded as "AB" (1 2) or "L" (12).

The number of ways decoding "12" is 2.

*/

// Dynamic Programming
// It can be treated as one digit and two digits (sum of two ways)

public class Solution {
    public int numDecodings(String s) {
        if (s == null || s.length() == 0) return 0;
        int[] dp = new int[s.length() + 1];
        dp[0] = 1;
        if (s.charAt(0) != '0') dp[1] = 1;
        else dp[1] = 0;
        for (int i = 2; i <= s.length(); i++) {
            int two = Integer.parseInt(s.substring(i - 2, i));
            int one = Integer.parseInt(s.substring(i - 1, i));
            if (one != 0) dp[i] = dp[i - 1];
            else dp[i] = 0;
            if (two <= 26 && two > 9) dp[i] += dp[i - 2];
        }
        return dp[s.length()];
    }
}

// Return all solutions

public class Solution {
    public int numDecodings(String s) {
        if (s == null || s.length() == 0) return 0;
        if (s.charAt(0) == '0') return 0;
        List<List<String>> dp = new ArrayList<List<String>>();
        for (int i = 0; i < s.length() + 1; i++) dp.add(new ArrayList<String>());
        dp.get(0).add("");
        dp.get(1).add("" + (char) ('A' + (s.charAt(0) - '0')));
        for (int i = 2; i < dp.size(); i++) {
            int a = s.charAt(i - 1) - '0';
            int b = (s.charAt(i - 2) -'0') * 10 + a;
            if (a != 0) {
                char c = (char) ('A' + a);
                for (String ss : dp.get(i - 1)) {
                    dp.get(i).add(ss + c);
                }
            }
            if (b >= 10 && b <=26) {
                char c = (char)('A' + b);
                for (String ss : dp.get(i - 2)) {
                    dp.get(i).add(ss + c);
                }
            }
        }
        return dp.get(s.length()).size();
    }
}

// Recursive

public class Solution {
    int num;
    public int numDecodings(String s) {
        if (s.length()==0) return 0;
        num = 0;
        dfs(s);
        return num;
    }

    public void dfs(String s){
        if (s.length()==0) num++;
        for(int i=0;i<=1&&i<s.length();i++){
            if (isValid(s.substring(0,i+1)))
                dfs(s.substring(i+1));
        }
    }

    public boolean isValid(String s){
        if (s.charAt(0)=='0') return false;
        int code = Integer.parseInt(s);
        return code>=1 && code<=26;
    }
}
