/**

Given a sorted array of integers nums and integer values a, b and c. Apply a function of the form f(x) = ax2 + bx + c to each element x in the array.

The returned array must be in sorted order.

Expected time complexity: O(n)

Example:
nums = [-4, -2, 2, 4], a = 1, b = 3, c = 5,

Result: [3, 9, 15, 33]

nums = [-4, -2, 2, 4], a = -1, b = 3, c = 5

Result: [-23, -5, 1, 7]

*/

// O(nlogn)

public class Solution {
    public int[] sortTransformedArray(int[] nums, int a, int b, int c) {
        int[] res = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            res[i] = cal(nums[i], a, b, c);
        }
        Arrays.sort(res);
        return res;
    }

    public int cal(int val, int a, int b, int c) {
        return a * val * val + b * val + c;
    }
}

// O(n)
public class Solution {
    public int[] sortTransformedArray(int[] nums, int a, int b, int c) {
        int start = 0, end = nums.length - 1;
        int[] sort = new int[nums.length];
        int idx = a >= 0 ? nums.length - 1 : 0;
        while (start <= end) {
            if (a >= 0) {
                sort[idx--] = cal(nums[start], a, b, c) >= cal(nums[end], a, b, c) ? cal(nums[start++], a, b, c) : cal(nums[end--], a, b, c);
            } else {
                sort[idx++] = cal(nums[start], a, b, c) >= cal(nums[end], a, b, c) ? cal(nums[end--], a, b, c) : cal(nums[start++], a, b, c);
            }
        }
        return sort;
    }

    public int cal(int val, int a, int b, int c) {
        return a * val * val + b * val + c;
    }
}
