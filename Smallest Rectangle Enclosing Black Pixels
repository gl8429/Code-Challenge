/**

An image is represented by a binary matrix with 0 as a white pixel and 1 as a black pixel. The black pixels are connected, i.e., there is only one black region. Pixels are connected horizontally and vertically. Given the location (x, y) of one of the black pixels, return the area of the smallest (axis-aligned) rectangle that encloses all black pixels.

For example, given the following image:

[
  "0010",
  "0110",
  "0100"
]
and x = 0, y = 2,
Return 6.

*/

// Binary Search, Time Complexity: O(m log n + n log m)

public class Solution {
    public int minArea(char[][] image, int x, int y) {
        int m = image.length, n = image[0].length;
        int left = searchCol(image, 0, y, 0, m, true);
        int right = searchCol(image, y + 1, n, 0, m, false);
        int top = searchRow(image, left, right, 0, x, true);
        int bottom = searchRow(image, left, right, x + 1, m, false);
        return (right - left) * (bottom - top);
    }
    
    public int searchCol(char[][] image, int left, int right, int top, int bottom, boolean directionLefRight) {
        while (left != right) {
            int k = top, mid = (left + right) / 2;
            while (k < bottom && image[k][mid] == '0') k++;
            if (k < bottom == directionLefRight) right = mid;
            else left = mid + 1;
        }
        return left;
    }
    
    public int searchRow(char[][] image, int left, int right, int top, int bottom, boolean directionTopBottom) {
        while (top != bottom) {
            int k = left, mid = (top + bottom) / 2;
            while (k < right && image[mid][k] == '0') k++;
            if (k < right == directionTopBottom) bottom = mid;
            else top = mid + 1;
        }
        return top;
    }
}
