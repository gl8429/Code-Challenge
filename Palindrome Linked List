/**

Given a singly linked list, determine if it is a palindrome.

Follow up:
Could you do it in O(n) time and O(1) space?

*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
// O(n) time, O(n) space
public class Solution {
    public boolean isPalindrome(ListNode head) {
        Stack<Integer> stack = new Stack<Integer>();
        ListNode dummy = head;
        while (head != null) {
            stack.push(head.val);
            head = head.next;
        }
        while (dummy != null) {
            if (dummy.val != stack.pop()) return false;
            dummy = dummy.next;
        }
        return true;
    }
}

// O(n) time, O(1) space
public class Solution {
    public boolean isPalindrome(ListNode head) {
        if (head == null || head.next == null) return true;
        ListNode fast = head, slow = head;
        ListNode pre = new ListNode(0);
        pre.next = head;
        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
            pre = pre.next;
        }
        if (fast != null) slow = slow.next;
        pre.next = null;
        ListNode newHead = reverse(slow);
        while (head != null && newHead != null) {
            if (head.val != newHead.val) return false;
            head = head.next;
            newHead = newHead.next;
        }
        if (head == null && newHead == null) return true;
        return false;
    }
    private ListNode reverse(ListNode head) {
        ListNode newHead = null;
        ListNode cur = head;
        while (cur != null) {
            ListNode tmp = cur.next;
            cur.next = newHead;
            newHead = cur;
            cur = tmp;
        }
        return newHead;
    }
}
