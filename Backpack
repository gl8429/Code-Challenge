/**

Given n items with size Ai, an integer m denotes the size of a backpack. How full you can fill this backpack?

*/


// 2D, boolean d[i][j]:  For the first i items, can we fill a backpack of size j? true or false.

public int backPack(int m, int[] A) {
        // write your code here
        boolean[][] res = new boolean[A.length+1][m+1];
        res[0][0] = true;
        for (int i=1; i<=A.length; i++) {
            for (int j=0; j<=m; j++) {
                res[i][j] = res[i-1][j] || (j-A[i-1]>=0 && res[i-1][j-A[i-1]]);
            }
        }
        for (int j=m; j>=0; j--) {
            if (res[A.length][j]) return j;
        }
        return 0;
}

// 1D
public class Solution {
    /**
     * @param m: An integer m denotes the size of a backpack
     * @param A: Given n items with size A[i]
     * @return: The maximum size
     */
    public int backPack(int m, int[] A) {
        // write your code here
        if (A == null || A.length == 0) return 0;
        boolean[] dp = new boolean[m + 1];
        dp[0] = true;
        Arrays.sort(A);
        for (int i = 1; i <= A.length; i++) {
            for (int j = m; j >=0; j--) {
                if (j - A[i - 1] >= 0 && dp[j - A[i -  1]]) dp[j] = true;
            }
        }
        for (int i = m; i>=0; i--) if (dp[i]) return i;
        return 0;
    }
}
