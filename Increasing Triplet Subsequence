/**

Given an unsorted array return whether an increasing subsequence of length 3 exists or not in the array.

Formally the function should:
Return true if there exists i, j, k 
such that arr[i] < arr[j] < arr[k] given 0 ≤ i < j < k ≤ n-1 else return false.
Your algorithm should run in O(n) time complexity and O(1) space complexity.

Examples:
Given [1, 2, 3, 4, 5],
return true.

Given [5, 4, 3, 2, 1],
return false.

*/

// O(n)

public class Solution {
    public boolean increasingTriplet(int[] nums) {
         int a = Integer.MAX_VALUE, b = Integer.MAX_VALUE;
         for (int num : nums) {
             if (num <= a) a = num;
             else if (num <= b) b = num;
             else return true;
         }
         return false;
    }
}

// O(n^2)

public class Solution {
    public boolean increasingTriplet(int[] nums) {
         int[] dp = new int[nums.length];
         for (int i = 0; i < nums.length; i++) {
             int max = 0;
             for (int j = i - 1; j >= 0; j--) {
                 if (nums[i] > nums[j]) {
                     max = Math.max(max, dp[j]);
                     dp[i] = max + 1;
                     if (max + 1 >= 2) return true;
                 }
             }
         }
         return false;
    }
}
