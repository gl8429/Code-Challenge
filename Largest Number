/*

Given a list of non negative integers, arrange them such that they form the largest number.

For example, given [3, 30, 34, 5, 9], the largest formed number is 9534330.

Note: The result may be very large, so you need to return a string instead of an integer.

*/

// Compare between the string needs O(len) and sort needs O(len*log(len)), the time complexity is O(len^2*log(len))

public class Solution {
    public String largestNumber(int[] nums) {
        StringBuilder sb = new StringBuilder();
        if (nums == null || nums.length == 0) return null;
        String[] num = new String[nums.length];
        for (int i = 0; i < num.length; ++i) {
            num[i] = Integer.toString(nums[i]);
        }
        Arrays.sort(num, new Comparator<String>() {
            @Override
            public int compare(String o1, String o2) {
                return (o1 + o2).compareTo(o2 + o1);
            }
        });
        if (num[num.length - 1].equals("0")) return "0";
        for (int i = num.length - 1; i > -1; --i) {
            sb.append(num[i]);
        }
        return sb.toString();
    }
}
