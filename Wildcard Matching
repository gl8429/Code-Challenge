/*

Implement wildcard pattern matching with support for '?' and '*'.

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "*") → true
isMatch("aa", "a*") → true
isMatch("ab", "?*") → true
isMatch("aab", "c*a*b") → false

*/

// Two pointers of string and pattern. Time Complexity: O(length(string) + length(pattern))

public class Solution {
    public boolean isMatch(String str, String pattern) {
        int s = 0, p = 0, match = 0, starIdx = -1;
        while (s < str.length()) {

            // Advancing both pointers when 
	    // 1. both characters match 2. '?' found in pattern
	    // p should not advance beyond its length

            if (p < pattern.length() && (pattern.charAt(p) == '?' || pattern.charAt(p) == str.charAt(s))) {
                s++;
                p++;

	    // * found in pattern, track index of *, only advancing pattern pointer (record current p and s)

            } else if (p < pattern.length() && pattern.charAt(p) == '*') {
                starIdx = p;
                match = s;
                p++;

	    // current characters didn't match, last pattern pointer was *, current pattern wasn't *
	    // only advancing string pointer

            } else if (starIdx != -1) {
                p = starIdx + 1;
                match++;
                s = match;

	    // current pattern is not star, last pattern was not star, characters do not match

            } else return false;
        }

	// check for remaining characters in pattern

        while (p < pattern.length() && pattern.charAt(p) == '*') p++;
        return p == pattern.length();
    }
    
}

// DP solution

/**
* f[i][j]: if s[0..i-1] matches p[0..j-1]
* if p[j - 1] != '*'
*      f[i][j] = f[i - 1][j - 1] && s[i - 1] == p[j - 1]
* if p[j - 1] == '*'
*      f[i][j] is true iff any of the following is true
*      1) "*" repeats 0 time and matches empty: f[i][j - 1]
*      2) "*" repeats >= 1 times and matches "*?": f[i - 1][j] bcoz s[i - 1] matches ? in "*?"
* '?' matches any single character
*/

    public boolean isMatch(String s, String p) {
        int m = s.length();
        int n = p.length();
        boolean[][] dp = new boolean[m + 1][n + 1];
        dp[0][0] = true;
        for (int i = 1; i <= m; i++) dp[i][0] = false;
        // p[0..j - 1] matches empty iff they are all "*"
	for (int j = 1; j <= n; j++) dp[0][j] = '*' == p.charAt(j - 1) && dp[0][j - 1];
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (p.charAt(j - 1) != '*') {
                    dp[i][j] = dp[i - 1][j - 1] && (s.charAt(i - 1) == p.charAt(j - 1) || p.charAt(j - 1) == '?');
                } else {
                    dp[i][j] = dp[i][j - 1] || dp[i - 1][j];
                }
            }
        }
        return dp[m][n];
    }
