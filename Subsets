/*
Given a set of distinct integers, nums, return all possible subsets.

Note:
Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.
For example,
If nums = [1,2,3], a solution is:

[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]
*/

// sort first (because a subset should be in non-descending order), then Backtracking

public class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> subset = new ArrayList<>();
        for (int i = 0; i <= nums.length; i++) {
            helper(result, subset, nums, i, 0);
        }
        return result;
    }
    
    public void helper(List<List<Integer>> result, List<Integer> subset, int[] nums, int index, int pos) {
        if (subset.size() == index) {
            result.add(new ArrayList<Integer>(subset));
            return;
        }
        for (int i = pos; i < nums.length; i++) {
            subset.add(nums[i]);
            helper(result, subset, nums, index, i + 1);
            subset.remove(subset.size() - 1);
        }
        return;
    }
}
