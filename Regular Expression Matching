/*

Implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "a*") → true
isMatch("aa", ".*") → true
isMatch("ab", ".*") → true
isMatch("aab", "c*a*b") → true

*/

// Recursion

public class Solution {
	public boolean isMatch(String s, String p) {
		for (int i = 0; i < p.length(); s = s.substring(1)) {
			char c = p.charAt(i);
			if (i + 1 >= p.length() || p.charAt(i + 1) != '*') i++;
			else if (isMatch(s, p.substring(i + 2))) return true;
			if (s.isEmpty() || (c != '.' && c != s.charAt(0))) return false;
		}
		return s.isEmpty();
	}
}

// Dynamic Programming

 /**
         * f[i][j]: if s[0..i-1] matches p[0..j-1]
         * if p[j - 1] != '*'
         *      f[i][j] = f[i - 1][j - 1] && s[i - 1] == p[j - 1]
         * if p[j - 1] == '*', denote p[j - 2] with x
         *      f[i][j] is true iff any of the following is true
         *      1) "x*" repeats 0 time and matches empty: f[i][j - 2]
         *      2) "x*" repeats >= 1 times and matches "x*x": s[i - 1] == x && f[i - 1][j]
         * '.' matches any single character
         */

public class Solution {
    public boolean isMatch(String s, String p) {
        boolean[][] f = new boolean[s.length() + 1][p.length() + 1];
        f[0][0] = true;
        for (int i = 1; i <= s.length(); i++) f[i][0] = false;

	// p[0.., j - 3, j - 2, j - 1] matches empty iff p[j - 1] is '*' and p[0..j - 3] matches empty

        for (int j = 1; j <= p.length(); j++) f[0][j] = j > 1 && '*' == p.charAt(j - 1) && f[0][j - 2];
        for (int i = 1; i <= s.length(); i++) {
            for (int j = 1; j <= p.length(); j++) {
                if (p.charAt(j - 1) != '*') f[i][j] = f[i - 1][j - 1] && (s.charAt(i - 1) == p.charAt(j - 1) || p.charAt(j - 1) == '.');

		// p[0] cannot be '*' so no need to check "j > 1" here
                else f[i][j] = f[i][j - 2] || ((s.charAt(i - 1) == p.charAt(j - 2) || '.' == p.charAt(j - 2)) && f[i - 1][j]);
            }
        }
        return f[s.length()][p.length()];
    }
}
