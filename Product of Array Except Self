/*

Given an array of n integers where n > 1, nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Solve it without division and in O(n).

For example, given [1,2,3,4], return [24,12,8,6].

Follow up:
Could you solve it with constant space complexity? (Note: The output array does not count as extra space for the purpose of space complexity analysis.)

*/

// Tranverse twice
// The product is calculated using the numbers before the current number and the numbers after the current number

public class Solution {
    public int[] productExceptSelf(int[] nums) {
        int left = 1, right = 1;
        int[] output = new int[nums.length];
        for (int i = nums.length - 1; i > -1; --i) {
            output[i] = right;
            right *= nums[i];
        }
        for (int i = 0; i < nums.length; ++i) {
            output[i] *= left;
            left *= nums[i];
        }
        return output;
    }
}
