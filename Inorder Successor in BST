/**

Given a binary search tree and a node in it, find the in-order successor of that node in the BST.

Note: If the given node has no in-order successor in the tree, return null.

*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {
        if (root == null) return null;
        if (root.val <= p.val) return inorderSuccessor(root.right, p);
        else {
            TreeNode left = inorderSuccessor(root.left, p);
	    // 如果能够找到 就返回left,没有就返回root
            return (left != null) ? left : root;
        }
    }
}

// Successor Iteration
/**

The inorder traversal in BST is in ascending order. To find a successor, we just need to find
the smallest one that is larger than the given node, since there is no duplicate in BST. Succ
is a pointer that keeps the possible successor. Whenever you go left, the current root is the
new possible successor, otherwise it remains the same.

*/

    public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {
        TreeNode succ = null;
        while (root != null) {
            if (root.val > p.val) {
                succ = root;
                root = root.left;
            } else {
                root = root.right;
            }
        }
        return succ;
    }

// Predecessor

public TreeNode predecessor(TreeNode root, TreeNode p) {
  if (root == null)
    return null;

  if (root.val >= p.val) {
    return predecessor(root.left, p);
  } else {
    TreeNode right = predecessor(root.right, p);
    return (right != null) ? right : root;
  }
}

// Iteration to find predecessor

public TreeNode inorderPredecessor (TreeNode root, TreeNode p) {
    TreeNode pre = null;
    while(root!=null) {
        if(root.val < p.val) {
        	pre = root;
        	root = root.right;
        }
        else root = root.left;
    }
    return pre;
}
