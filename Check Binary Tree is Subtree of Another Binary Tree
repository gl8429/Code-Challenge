/**

For example, in the following case, Tree1 is a subtree of Tree2.


        Tree1
          x 
        /    \
      a       b
       \
        c


        Tree2
              z
            /   \
          x      e
        /    \     \
      a       b      k
       \
        c

*/

// Time Complexity: O(N^2)

public boolean isSame(TreeNode root1, TreeNode root2) {
	if (root1 == null && root2 == null) return true;
	if (root1 == null || root2 == null) return false;
	return (root1.val == root2.val && isSame(root1.left, root2.left) && isSame(root1.right, root2.right);
}

public boolean isSubTree(TreeNode root1, TreeNode root2) {
	if (root1 == null) return false;
	if (root2 == null) return true;
	return isSubTree(root1.left, root2) || isSubTree(root1.right, root2);
}

