/**

Given a collection of distinct numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

**/

public class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        dfs(nums, 0, res);
        return res;
    }

    public void dfs(int[] nums, int begin, List<List<Integer>> res) {
        if (begin >= nums.length) {
            List<Integer> tmp = new ArrayList<Integer>();
            for (int i = 0; i < nums.length; ++i) {
                tmp.add(nums[i]);
            }
            res.add(tmp);
            return;
        }
        for (int i = begin; i < nums.length; ++i) {
            swap(nums, i, begin);
            dfs(nums, begin + 1, res);
            swap(nums, i, begin);
        }
    }

    public void swap(int[] nums, int a, int b) {
        int tmp = nums[a];
        nums[a] = nums[b];
        nums[b] = tmp;
    }
}
