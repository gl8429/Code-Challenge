/*

Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].

*/

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */

// Sort by start time first
// Then merge, if current interval's end time is later than next one, merge these two intervals
//             otherwise, record it and update current interval by the next one
// Time Complexity: O(n(log(n)))

public class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        List<Interval> list = new LinkedList<Interval>();
        if (intervals.size() < 2) return intervals;
        Collections.sort(intervals, new Comparator<Interval> (){
            @Override
            public int compare(Interval o1, Interval o2) {
                return o1.start - o2.start;
            }
        });
        Interval cur = intervals.get(0);
        for (Interval iter : intervals) {
            if (cur.end >= iter.start) {
                cur.end = Math.max(cur.end, iter.end);
            } else {
                list.add(cur);
                cur = iter;
            }
        }
        list.add(cur);
        return list;
    }
}
