    /**
     Given a set of numbers, find the Length of the Longest Arithmetic Progression (LLAP) in it.

     Examples:

     set[] = {1, 7, 10, 15, 27, 29}
     output = 3
     The longest arithmetic progression is {1, 15, 29}

     set[] = {5, 10, 15, 20, 25, 30}
     output = 6
     The whole set is in AP
     */
// http://www.geeksforgeeks.org/length-of-the-longest-arithmatic-progression-in-a-sorted-array/
public static boolean arithmeticThree(int[] array) {
        for (int i = 1; i < array.length - 1; i++) {
            int j = i - 1, k = i + 1;
            while (j >= 0 && k < array.length) {
                if (array[j] + array[k] == 2 * array[i]) return true;
                else if (array[j] + array[k] > 2 * array[i]) k--;
                else i++;
            }
        }
        return false;
    }

    public static int lenghtOfLongestAP(int[] array) {
        int length = array.length;
        // L[i][j] stores LLAP with set[i] and set[j] as first two
        // elements of AP. Only valid entries are the entries where j>i
        int[][] L = new int[length][length];
        int max = 2;
        for (int i = 0; i < length; i++) L[i][length - 1] = 2;
        for (int j = length - 2; j >= 1; j--) {
            int i = j - 1, k = j + 1;
            while (i >= 0 && k < length) {
                if (array[j] * 2 == array[i] + array[k]) {
                    L[i][j] = L[j][k] + 1;
                    max = Math.max(max, L[i][j]);
                    i--; k++;
                } else if (array[j] * 2 > array[i] + array[k]) {
                    k++;
                } else {
                    L[i][j] = 2;
                    i--;
                }
            }
            while (i >= 0) {
                L[i][j] = 2;
                i--;
            }
        }
        return max;
    }
