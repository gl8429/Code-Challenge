/*

Given a 2D binary matrix filled with 0's and 1's, find the largest square containing all 1's and return its area.

For example, given the following matrix:

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0
Return 4.

*/

public class Solution {
    public int maximalSquare(char[][] matrix) {
        if (matrix == null || matrix.length == 0) return 0;
        int rowNumber = matrix.length;
        int colNumber = matrix[0].length;
        int[][] dp = new int[rowNumber][colNumber];
        int maxSide = 0;
        for (int i = 0; i < rowNumber; i++) {
            dp[i][0] = matrix[i][0] - '0';
            maxSide = Math.max(maxSide, dp[i][0]);
        }
        for (int j = 0; j < colNumber; j++) {
            dp[0][j] = matrix[0][j] - '0';
            maxSide = Math.max(maxSide, dp[0][j]);
        }
        for (int i = 1; i < rowNumber; ++i) {
            for (int j = 1; j < colNumber; ++j) {
                if (matrix[i][j] - '0' == 0) dp[i][j] = 0;
                else dp[i][j] = Math.min(dp[i - 1][j - 1], Math.min(dp[i - 1][j], dp[i][j - 1])) +1;
                if (dp[i][j] > maxSide) maxSide = dp[i][j];
            }
        }
        return maxSide * maxSide;
    }
}
