/**

Given a 2D array, find the maximum sum subarray in it.
There is some negative number in the array

*/

/**

This problem we can extend from 1D array.

*/

public class MaxSumRectangleMatrix {
    public int[] oneDMax(int[] array) {
        int[] res = new int[]{Integer.MIN_VALUE, 0, -1};
        int currentSum = 0, localStart = 0;
        for (int i = 0; i < array.length; i++) {
            currentSum += array[i];
            if (currentSum < 0) {
                currentSum = 0;
                localStart = i + 1;
            } else if (currentSum > res[0]) {
                res[0] = currentSum;
                res[1] = localStart;
                res[2] = i;
            }
        }
        // all numbers in this array is negative
        if (res[2] == -1) {
            res[0] = Integer.MIN_VALUE;
            for (int i = 0; i < array.length; i++) {
                if (array[i] > res[0]) {
                    res[0] = array[i];
                    res[1] = i;
                    res[2] = i;
                }
            }
        }
        return res;
    }

    public int[] twoDMax(int[][] array) {
        int colNum = array[0].length;
        int rowNum = array.length;
        int[] currentResult;
        int maxSum = Integer.MIN_VALUE;
        int left = 0, right = 0, top = 0, bottom = 0;
        for (int leftCol = 0; leftCol < colNum; leftCol++) {
            int[] tmp = new int[rowNum];
            for (int rightCol = leftCol; rightCol < colNum; rightCol++) {
                for (int i = 0; i < rowNum; i++) {
                    tmp[i] += array[i][rightCol];
                }
                currentResult = oneDMax(tmp);
                if (currentResult[0] > maxSum) {
                    maxSum = currentResult[0];
                    left = leftCol;
                    right = rightCol;
                    top = currentResult[1];
                    bottom = currentResult[2];
                }
            }
        }
        return new int[]{left, right, top, bottom};
    }

}

