/*

Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isBalanced(TreeNode root) {
        return treeHeight(root) != -1;

    }
    public int treeHeight(TreeNode root){
        if (root == null) return 0;
        int lHeight = treeHeight(root.left);
        if (lHeight == -1) return -1;
        int rHeight = treeHeight(root.right);
        if (rHeight == -1) return -1;
        if (Math.abs(lHeight - rHeight) > 1) return -1;
        return Math.max(lHeight, rHeight) + 1;
    }
}

// Second solution, but slower

public class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root == null) return true;
        if(root.left == null && root.right == null){
            return true;
        }
        if(Math.abs(treeHeight(root.left) - treeHeight(root.right)) > 1){
            return false;
        }
        return isBalanced(root.right) && isBalanced(root.left);

    }
    public int treeHeight(TreeNode root){
        if(root == null) return 0;
        return Math.max(treeHeight(root.left), treeHeight(root.right)) + 1;
    }
}
