/*

Given n non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.
       6
     5 _
     _| |
    | | |  3
 2  | | |2 _
 _ 1| | |_| |
| |_| | | | |
|_|_|_|_|_|_|

Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].

       6
     5 _
     _| |
    |;|;|  3
 2  |;|;|2 _
 _ 1|;|;|_| |
| |_|;|;| | |
|_|_|;|;|_|_|


The largest rectangle is shown in the shaded area, which has area = 10 unit.

For example,
Given heights = [2,1,5,6,2,3],
return 10.

*/

// Max Stack

public class Solution {
    public int largestRectangleArea(int[] height) {
        if (height == null || height.length == 0) return 0;
        Stack<Integer> index = new Stack<Integer>();
        height = Arrays.copyOf(height, height.length + 1);
        int max = 0;
        for (int i = 0; i < height.length; ++i) {
	    // larger height than before will be put into stack directly
            // else if stack is not empty calculate the size, width is the distance between current and stack.peek()
	    //	    else (stack is empty), width is the index of current.
	    // note: this time the size we calculate does not include the current histogram
	    while (!index.isEmpty() && height[i] < height[index.peek()]) {
                max = Math.max(max, height[index.pop()] * (index.isEmpty() ? i : i - 1 - index.peek()));
            }
            index.push(i);
        }
        return max;
    }
}
