/**

Given an array which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these m subarrays.

Note:
Given m satisfies the following constraint: 1 ≤ m ≤ length(nums) ≤ 14,000.

Examples:

Input:
nums = [7,2,5,10,8]
m = 2

Output:
18

Explanation:
There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8],
where the largest sum among the two subarrays is only 18.

*/

public class Solution {
    public int splitArray(int[] nums, int m) {
        long high = 0;
        int low = 0;
        for (int num : nums) {
            high += num;
            if (low < num) low = num;
        }
        return (int)binarySearch(nums, m, Math.max(low,high/m), high);
    }
    
    public long binarySearch(int[] nums, int m, long low, long high) {
        long mid = 0;
        while (low <= high) {
            mid = (high + low) /2;
            if (valid(nums, m, mid)) high = mid - 1;
            else low = mid + 1;
        }
        return low;
    }
    
    public boolean valid(int[] nums, int m, long max) {
        int cur = 0;
        int count = 1;
        for (int num : nums) {
            cur += num;
            if (cur > max) {
                cur = num;
                count++;
                if (count > m) return false;
            }
        }
        return true;
    }
}
