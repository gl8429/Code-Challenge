/**

Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [−2,1,−3,4,−1,2,1,−5,4],
the contiguous subarray [4,−1,2,1] has the largest sum = 6.

click to show more practice.

More practice:
If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle

*/
// Dynamic programming
public class Solution {
    
    public int maxSubArray(int[] nums) {
        if (nums == null || nums.length == 0) return 0;
        if (nums.length == 1) return nums[0];
        int maxValue = Integer.MIN_VALUE;
        int parentMax = 0;
        for (int num : nums) {
            int tmp = Math.max(num , num + parentMax);
            maxValue = Math.max(tmp, maxValue);
            if (tmp <= 0) parentMax = 0;
            else parentMax = tmp;
        }
        return maxValue;
    }
}

// Divide and Conquer
public class Solution {
    
    public int maxSubArray(int[] nums) {
        return maxSubArray(nums, 0, nums.length - 1);
    }
    
    public int maxSubArray(int[] nums, int l, int r) {
        if (l > r) return Integer.MIN_VALUE;
        int m = l + (r - l) / 2;
        int lm  = maxSubArray(nums, l, m - 1);
        int rm = maxSubArray(nums, m + 1, r);
        int i, sum, ml = 0, mr = 0;
        for (i = m - 1, sum = 0; i >= l; i--) {
            sum += nums[i];
            ml = Math.max(ml, sum);
        }
        for (i = m + 1, sum = 0; i <= r; i++) {
            sum += nums[i];
            mr = Math.max(mr, sum);
        }
        return Math.max(Math.max(lm, rm), ml + mr + nums[m]);
    }
}
