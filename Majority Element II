/**

Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times. The algorithm should run in linear time and in O(1) space.

Hint:

How many majority elements could it possibly have?

*/

public class Solution {
    public List<Integer> majorityElement(int[] nums) {
        int candidate1 = 0;
        int candidate2 = 1;
        int count1 = 0;
        int count2 = 0;
        for (int num : nums) {
            if (num == candidate1) count1++;
            else if (num == candidate2) count2++;
            else if (count1 == 0) {
                candidate1 = num;
                count1 = 1;
            } else if (count2 == 0) {
                candidate2 = num;
                count2 = 1;
            } else {
                count1--;
                count2--;
            }
        }
        List<Integer> res = new ArrayList<Integer>();
        if (count(nums, candidate1) > nums.length / 3) res.add(candidate1);
        if (count(nums, candidate2) > nums.length / 3) res.add(candidate2);
        return res;
    }

    public int count(int[] nums, int target) {
        int i = 0;
        for (int num : nums) {
            if (target == num) i++;
        }
        return i;
    }
}
