/**

Given a Binary Tree, convert it to a Circular Doubly Linked List (In-Place).

The left and right pointers in nodes are to be used as previous and next pointers respectively in converted Circular Linked List.
The order of nodes in List must be same as Inorder of the given Binary Tree.
The first node of Inorder traversal must be head node of the Circular List.

          10
        /    \
      12      15
     /  \    /
    25  30  36

head = 25 = 12 = 30 = 10 = 36 = 15 = tail

*/

/**

1) Write a general purpose function that concatenates two given circular doubly lists (This function is explained below).
2) Now traverse the given tree
….a) Recursively convert left subtree to a circular DLL. Let the converted list be leftList.
….a) Recursively convert right subtree to a circular DLL. Let the converted list be rightList.
….c) Make a circular linked list of root of the tree, make left and right of root to point to itself.
….d) Concatenate leftList with list of single root node.
….e) Concatenate the list produced in step above (d) with rightList.

*/

public TreeNode bTreeToCList(TreeNode root) {
	if (root == null) return null;
	Node left = bTreeToCList(root.left);
	Node right = bTreeToCList(root.right);
	root.left = root.right = root;
	return concatenate(concatenate(left, root), right);
}

public TreeNode concatenate(TreeNode leftList, TreeNode rightList) {
	if (leftList == null) return rightList;
	if (rightList == null) return leftList;
	TreeNode leftLast = leftList.left;
	TreeNode rightLast = rightList.left;
	leftLast.right = rightList;
	rightList.left = leftLast;
	leftList.left = rightLast;
	rightLast.right = leftList;
	return leftList;
}
}
