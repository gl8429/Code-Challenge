/*

Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

For example,
If n = 4 and k = 2, a solution is:

[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

*/

// dfs + backtracking

public class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        List<Integer> current = new ArrayList<Integer>();
        helper(result, current, n, k, 1);
        return result;
    }
    
    public void helper(List<List<Integer>> result, List<Integer> current, int n, int k, int pos) {
        if (current.size() == k) {
	    // copy a new ArrayList
            result.add(new ArrayList<Integer>(current));
            return;
        }
        for (int i = pos; i <= n; i++) {
            current.add(i);
            helper(result, current, n, k, i + 1);
            // remember to remove
	    current.remove(current.size() - 1);
        }
    }
}
