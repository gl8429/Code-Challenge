/**

Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.

For "(()", the longest valid parentheses substring is "()", which has length = 2.

Another example is ")()())", where the longest valid parentheses substring is "()()", which has length = 4.

*/

// Time Complexity : O(n) , stack solution

public class Solution {
    public int longestValidParentheses(String s) {
		Stack<Integer> stack = new Stack<Integer>();
		int max = 0;
		int left = -1;
		for (int i = 0; i < s.length(); ++i) {
			if (s.charAt(i) == '(') stack.push(i);
			else {
				if (stack.isEmpty()) left = i;
				else {
					stack.pop();
					if (stack.isEmpty()) max = Math.max(max, i - left);
					else max = Math.max(max, i - stack.peek());
				}
			}
		}
		return max;
	}
}

// DP V[i-1] is its previous consecutive parentheses, i-2-V[i-1] is the position right outside this big "( ... )" part. So check if previous big "(...)" is a valid one

    public int longestValidParentheses(String s) {
        char[] array = s.toCharArray();
        int[] dp = new int[s.length()];
        int open = 0;
        int max = 0;
        for (int i = 0; i < s.length(); i++) {
            if (array[i] == '(') open++;
            if (array[i] == ')' && open > 0) {
                dp[i] = 2 + dp[i - 1];
                if (i >= dp[i]) dp[i] += dp[i - dp[i]];
                open--;
            }
            if (dp[i] > max) max = dp[i];
        }
        return max;
    }
