/**

Given a list of airline tickets represented by pairs of departure and arrival airports [from, to], reconstruct the itinerary in order. All of the tickets belong to a man who departs from JFK. Thus, the itinerary must begin with JFK.

Note:
If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. For example, the itinerary ["JFK", "LGA"] has a smaller lexical order than ["JFK", "LGB"].
All airports are represented by three capital letters (IATA code).
You may assume all tickets form at least one valid itinerary.
Example 1:
tickets = [["MUC", "LHR"], ["JFK", "MUC"], ["SFO", "SJC"], ["LHR", "SFO"]]
Return ["JFK", "MUC", "LHR", "SFO", "SJC"].
Example 2:
tickets = [["JFK","SFO"],["JFK","ATL"],["SFO","ATL"],["ATL","JFK"],["ATL","SFO"]]
Return ["JFK","ATL","JFK","SFO","ATL","SFO"].
Another possible reconstruction is ["JFK","SFO","ATL","JFK","ATL","SFO"]. But it is larger in lexical order.

*/

public class Solution {
    public List<String> findItinerary(String[][] tickets) {
        int length = tickets.length;
        Map<String, List<String>> map = new HashMap<String, List<String>>();
        for (String[] ticket : tickets) {
            List<String> destList = map.get(ticket[0]);
            if (destList == null) {
                destList = new ArrayList<String>();
                map.put(ticket[0], destList);
            }
            destList.add(ticket[1]);
        }
        for (List<String> destList : map.values()) {
            Collections.sort(destList);
        }
        List<String> ans = new ArrayList<>();
        ans.add("JFK");
        dfs(ans, new ArrayList<String>(), map, "JFK", length);
        return ans;
    }
    
    public void dfs(List<String> ans, List<String> cur, Map<String, List<String>> map, String src, int length) {
        if (ans.size() > 1) return;
        if (cur.size() == length) {
            ans.addAll(cur);
            return;
        }
        List<String> destList = map.get(src);
        if (destList != null) {
            for (int i = 0; i < destList.size(); ++i) {
                String dest = destList.remove(i);
                cur.add(dest);
                dfs(ans, cur, map, dest, length);
                cur.remove(cur.size() - 1);
                destList.add(i, dest);
            }
        }
    }
}
