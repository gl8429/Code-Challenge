/**

Given preorder and inorder traversal of a tree, construct the binary tree.

*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

// O(n) solution
public class Solution {
    
    int preorderIdx;
    int inorderIdx;
    
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        preorderIdx = 0;
        inorderIdx = 0;
        return buildTree(preorder, inorder, null);
    }
    // end is the boundary of left tree
    public TreeNode buildTree(int[] preorder, int[] inorder, TreeNode end) {
        if (preorderIdx > preorder.length - 1) return null;
        TreeNode n = new TreeNode(preorder[preorderIdx++]);
        if (n.val != inorder[inorderIdx]) n.left = buildTree(preorder, inorder, n);
        inorderIdx++;
        if ((end == null) || (inorder[inorderIdx] != end.val)) n.right = buildTree(preorder, inorder, end);
        return n;
    }
}

// O(nlogn) solution
public class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        return build(preorder, inorder, 0, inorder.length - 1, 0);
    }
    
    public TreeNode build(int[] preorder, int[] inorder, int inS, int inE, int preIdx) {
        if (inS > inE || preIdx > preorder.length - 1) return null;
        TreeNode root = new TreeNode(preorder[preIdx]);
        int inRoot = 0;
        for (int i = inS; i <= inE; i++) {
            if (inorder[i] == root.val) {
                inRoot = i;
                break;
            }
        }
        root.left = build(preorder, inorder, inS, inRoot - 1, preIdx + 1);
        root.right = build(preorder, inorder, inRoot + 1, inE, preIdx + inRoot - inS + 1);
        return root;
    }
}
