/**

Given a pattern and a string str, find if str follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty substring in str.

Examples:
pattern = "abab", str = "redblueredblue" should return true.
pattern = "aaaa", str = "asdasdasdasd" should return true.
pattern = "aabb", str = "xyzabcxzyabc" should return false.

*/

public class Solution {
    public boolean wordPatternMatch(String pattern, String str) {
        Map<Character, String> map = new HashMap<Character, String>();
        Set<String> set = new HashSet<String>();
        return isMatch(map, set, pattern, 0, str, 0);
    }

    boolean isMatch(Map<Character, String> map, Set<String> set, String pattern, int p, String str, int s) {
        if (p == pattern.length() && s == str.length()) return true;
        if (p == pattern.length() || s == str.length()) return false;
        char c = pattern.charAt(p);
        if (map.containsKey(c)) {
            String cur = map.get(c);
            if (!str.startsWith(cur, s)) return false;
            return isMatch(map, set, pattern, p + 1, str, s + cur.length());
        }
        for (int k = s; k < str.length(); k++) {
            String tmp = str.substring(s, k + 1);
            if (set.contains(tmp)) continue;
            map.put(c, tmp);
            set.add(tmp);
            if (isMatch(map, set, pattern, p + 1, str, k + 1)) return true;
            map.remove(c);
            set.remove(tmp);
        }
        return false;
    }
}
