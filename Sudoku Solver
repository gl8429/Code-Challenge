/**

Write a program to solve a Sudoku puzzle by filling the empty cells.

Empty cells are indicated by the character '.'.

You may assume that there will be only one unique solution.

*/

public class Solution {
    public void solveSudoku(char[][] board) {
        if (board == null || board.length == 0) return;
        solve(board);
    }
    
    public boolean solve(char[][] board) {
        for (int i = 0; i < board.length; ++i) {
            for (int j = 0; j < board[0].length; ++j) {
                if (board[i][j] == '.') {
                    for (char c = '1'; c <= '9'; c++) {
                        if (isValid(board, i, j, c)) {
                            board[i][j] = c;
                            if (solve(board)) return true;
                            else board[i][j] = '.';
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
    
    public boolean isValid(char[][] board, int i, int j, char c) {
        for (int x = 0; x < 9; x++) if (board[x][j] == c) return false;
        for (int y = 0; y < 9; y++) if (board[i][y] == c) return false;
        for (int x = (i / 3) * 3; x < (i / 3) * 3 + 3; ++x) {
            for (int y = (j / 3) * 3; y < (j / 3) * 3 + 3; ++y) {
                if (board[x][y] == c) return false;
            }
        }
        return true;
    }
}
