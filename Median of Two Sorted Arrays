/**

There are two sorted arrays nums1 and nums2 of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

*/

/**
          left_part          |        right_part
    A[0], A[1], ..., A[i-1]  |  A[i], A[i+1], ..., A[m-1]
    B[0], B[1], ..., B[j-1]  |  B[j], B[j+1], ..., B[n-1]

    Conditions: 1. len(left_part) == len(right_part)
                2. max(left_part) <= min(right_part)

	Then the median: ((max(left_part)) + min(right_part)) / 2

    Advance, 1. i + j == m - i + n - j (or m - i + n - j + 1)
            2. B[j - 1] <= A[i] and A[i - 1] < = B[j]

    Binary Search,
        <1> Set imin = 0, imax = m, then start searching in [imin, imax]

        <2> Set i = (imin + imax)/2, j = (m + n + 1)/2 - i

        <3> Now we have len(left_part)==len(right_part). And there are only 3 situations
            that we may encounter:
            <a> B[j-1] <= A[i] and A[i-1] <= B[j]
                Means we have found the object `i`, so stop searching.
            <b> B[j-1] > A[i]
                Means A[i] is too small. We must `ajust` i to get `B[j-1] <= A[i]`.
                So we must `increase` i. That is, we must ajust the searching range to
                [i+1, imax]. So, set imin = i+1, and goto <2>.
            <c> A[i-1] > B[j]
                Means A[i-1] is too big. And we must `decrease` i to get `A[i-1]<=B[j]`.
                That is, we must ajust the searching range to [imin, i-1].
                So, set imax = i-1, and goto <2>.

    When the object i is found, the median is:
        max(A[i-1], B[j-1]) (when m + n is odd)
        or (max(A[i-1], B[j-1]) + min(A[i], B[j]))/2 (when m + n is even)
*/

public class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m = nums1.length;
        int n = nums2.length;
        if (m > n) return findMedianSortedArrays(nums2, nums1);
        int minidx = 0, maxidx = m, i, j, mid = (m + n + 1) / 2;
        int num1, num2;
        while (minidx <= maxidx) {
            i = (minidx + maxidx) >> 1;
            j = mid - i;
            if (i < m && j > 0 && nums2[j - 1] > nums1[i]) minidx = i + 1;
            else if (i > 0 && j < n && nums2[j] < nums1[i - 1]) maxidx = i - 1;
            else {
                if (i == 0) num1 = nums2[j - 1];
                else if (j == 0) num1 = nums1[i - 1];
                else num1 = Math.max(nums1[i - 1], nums2[j - 1]);
                if ((m + n) % 2 == 1) return num1;
                if (i == m) num2 = nums2[j];
                else if (j == n) num2 = nums1[i];
                else num2 = Math.min(nums1[i], nums2[j]);
                return (num1 + num2) / 2.0;
            }
        }
        return 0;
    }
}
