/**

You want to build a house on an empty land which reaches all buildings in the shortest amount of distance. You can only move up, down, left and right. You are given a 2D grid of values 0, 1 or 2, where:

Each 0 marks an empty land which you can pass by freely.
Each 1 marks a building which you cannot pass through.
Each 2 marks an obstacle which you cannot pass through.
For example, given three buildings at (0,0), (0,4), (2,2), and an obstacle at (0,2):

1 - 0 - 2 - 0 - 1
|   |   |   |   |
0 - 0 - 0 - 0 - 0
|   |   |   |   |
0 - 0 - 1 - 0 - 0
The point (1,2) is an ideal empty land to build a house, as the total travel distance of 3+3+1=7 is minimal. So return 7.

*/

// Time Complexity: O(m^2*n^2)

public class Solution {
    private final static int[][] dirs = new int[][]{{1,0}, {-1, 0}, {0, 1}, {0, -1}};
    
    public int shortestDistance(int[][] grid) {
        if (grid == null || grid.length == 0) return 0;
        int row = grid.length, col = grid[0].length;
        int[][] distance = new int[row][col];
        int[][] reach = new int[row][col];
        int numBuildings = 0;
        for (int i = 0; i < row; ++i) {
            for (int j = 0; j < col; ++j) {
                if (grid[i][j] == 1) {
                    numBuildings++;
                    Queue<int[]> queue = new LinkedList<>();
                    queue.offer(new int[] {i, j});
                    boolean[][] isVisited = new boolean[row][col];
                    int level = 1;
                    while (!queue.isEmpty()) {
                        int qSize = queue.size();
                        for (int q = 0; q < qSize; ++q) {
                            int[] cur = queue.poll();
                            for (int[] dir : dirs) {
                                int x = dir[0] + cur[0];
                                int y = dir[1] + cur[1];
                                if (x >= 0 && x < row && y >= 0 && y < col && !isVisited[x][y] && grid[x][y] == 0) {
                                    distance[x][y] += level;
                                    reach[x][y]++;
                                    isVisited[x][y] = true;
                                    queue.offer(new int[] {x, y});
                                    
                                }
                            }
                        }
                        level++;
                    }
                }
            }
        }
        int shortest = Integer.MAX_VALUE;
        for (int i = 0; i < row; ++i) {
            for (int j = 0; j < col; ++j) {
                if (grid[i][j] == 0 && reach[i][j] == numBuildings) {
                    shortest = Math.min(shortest, distance[i][j]);
                }
            }
        }
        return shortest == Integer.MAX_VALUE ? -1 : shortest;
    }
}
