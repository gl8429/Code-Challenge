/**

Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.

Note that it is the kth smallest element in the sorted order, not the kth distinct element.

Example:

matrix = [
   [ 1,  5,  9],
   [10, 11, 13],
   [12, 13, 15]
],
k = 8,

return 13.

*/

Note:
You may assume k is always valid, 1 ≤ k ≤ n2.

public class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        int n = matrix.length;
        PriorityQueue<Tuple> pq = new PriorityQueue<Tuple>();
        for (int j = 0; j < n; j++) pq.offer(new Tuple(0, j, matrix[0][j]));
        for (int i = 0; i < k - 1; i++) {
            Tuple t = pq.poll();
            if (t.x == n - 1) continue;
            pq.offer(new Tuple(t.x + 1, t.y, matrix[t.x + 1][t.y]));
        }
        return pq.poll().val;
    }

}

class Tuple implements Comparable<Tuple> {
    int x, y, val;
    public Tuple (int x, int y, int val) {
        this.x = x;
        this.y = y;
        this.val = val;
    }

    @Override
    public int compareTo(Tuple that) {
        return this.val - that.val;
    }
}

// Binary Search with O(nlogn), n is the elements number of the matrix
// Actually,it could be accurate as O(nlog(n)log(N)), n is the number of rows
   int n = matrix.length;

    int left = matrix[0][0], right = matrix[n - 1][n - 1];

    while (left < right) {
        int mid = (left + right) / 2;
        int count = 0; // number of elements no bigger than mid

        for (int i = 0; i < n; i++) {
            int[] row = matrix[i];

            int t_left = 0, t_right = row.length;
            while (t_left < t_right) {
                int t_mid = (t_left + t_right) / 2;
                int value = row[t_mid];
                if(value > mid) {
                    t_right = t_mid;
                } else {
                    t_left = t_mid + 1;
                }
            }
            count += t_left;
        }

        if (count < k) {
            left = mid + 1;
        } else {
            right = mid;
        }
    }
    return left;
