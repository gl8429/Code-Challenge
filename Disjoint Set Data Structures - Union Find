/**

Consider a situation with a number of persons and following tasks to be performed on them.

Add a new friendship relation, i.e., a person x becomes friend of another person y.
Find whether individual x is a friend of individual y (direct or indirect friend)

*/

Find : Can be implemented by recursively traversing the parent array until we hit a node who is parent of itself.

// Finds the representative of the set that i is an element of
public int find(int i) {
    // If i is the parent of itself
    if (parent[i] == i) {
        // Then i is the representative of this set
        return i;
    }
    else {
        // Else if i is not the parent of itself, then i is not the 
        // representative of his set. So we recursively call Find on its parent
        return find(parent[i]);
    }
}
Union: It takes, as input, two elements. And finds the representatives of their sets using the find operation, 
and finally puts either one of the trees (representing the set) under the root node of the other tree, 
effectively merging the trees and the sets.

// Unites the set that includes i and the set that includes j
public void union(int i, int j) {
    // Find the representatives (or the root nodes) for the set that includes i
    int irep = this.Find(i),

    // And do the same for the set that includes j
    int jrep = this.Find(j);

    // Make the parent of i’s representative be j’s  representative effectively 
    // moving all of i’s set into j’s set)
    this.Parent[irep] = jrep;
}

Improvements (Union by Rank and Path Compression)

The efficiency depends heavily on the height of the tree. 
We need to minimize the height of tree in order improve the efficiency. 
We can use Path Compression and Union by rank methods to do so.

Path Compression (Modifications to find()) : 
It speeds up the data structure by compressing the height of the trees.
It can be achieved by inserting a small caching mechanism into the Find operation.
Take a look at the code for more details:

// Finds the representative of the set that i is an element of.
int find(int i) {
    // If i is the parent of itself
    if (Parent[i] == i) {
        // Then i is the representative 
        return i;
    }
    else { 
        // Recursively find the representative.
        int result = find(Parent[i]);

        // We cache the result by moving i’s node 
        // directly under the representative of this set
        Parent[i] = result;
       
        // And then we return the result
        return result;
     }
}

Improvements (Union by Rank)
 
First of all, we need a new array of integers called rank[].
Size of this array is same as the parent array.
If i is a representative of a set, rank[i] is the height of the tree representing the set.

	1. If the rank of left is less than the rank of right, then it’s best to move left under right,
	because that won’t change the rank of right (while moving right under left would increase the height).
	In the same way, if the rank of right is less than the rank of left, then we should move right under left.

	2. If the ranks are equal, it doesn’t matter which tree goes under the other,
	but the rank of the result will always be one greater than the rank of the trees.

// Unites the set that includes i and the set that includes j
void union(int i, int j) {
    // Find the representatives (or the root nodes) 
    // for the set that includes i
    int irep = this.find(i);

    // And do the same for the set that includes j
    int jrep = this.Find(j);

    // Elements are in same set, no need to unite anything.    
    if (irep == jrep)
        return;

    // Get the rank of i’s tree
    irank = Rank[irep],

    // Get the rank of j’s tree
    jrank = Rank[jrep];

    // If i’s rank is less than j’s rank
    if (irank < jrank) {
        // Then move i under j
        this.parent[irep] = jrep;
    } 

    // Else if j’s rank is less than i’s rank
    else if (jrank < irank) {
        // Then move j under i
        this.Parent[jrep] = irep;
    } 

    // Else if their ranks are the same
    else {

        // Then move i under j (doesn’t matter which one goes where)
        this.Parent[irep] = jrep;

        // And increment the the result tree’s rank by 1
        Rank[jrep]++;
    }
}
