/*

Given an array of n positive integers and a positive integer s, find the minimal length of a subarray of which the sum â‰¥ s. If there isn't one, return 0 instead.

For example, given the array [2,3,1,2,4,3] and s = 7,
the subarray [4,3] has the minimal length under the problem constraint.

More practice:
If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n).

*/

public class Solution {
    public int minSubArrayLen(int s, int[] nums) {
        int begin = 0, end = 0;
        int length = Integer.MAX_VALUE, sum = 0;
        while (end < nums.length) {
            sum += nums[end++];
            while (sum >= s) {
                length = Math.min(length, end - begin);
                sum -= nums[begin++];
            }
            
        }
        return length == Integer.MAX_VALUE ? 0 : length;
    }
}
