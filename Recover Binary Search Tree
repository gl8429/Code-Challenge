/**

Two elements of a binary search tree (BST) are swapped by mistake.

Recover the tree without changing its structure.

Note:
A solution using O(n) space is pretty straight forward. Could you devise a constant space solution?

*/


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    TreeNode first = null;
    TreeNode second = null;
    TreeNode pre = new TreeNode(Integer.MIN_VALUE);
    
    public void recoverTree(TreeNode root) {
        traversal(root);
        
        int tmp = first.val;
        first.val = second.val;
        second.val = tmp;
    }
    
    public void traversal(TreeNode root) {
        if (root == null) return;
        traversal(root.left);
        if (first == null && root.val <= pre.val) first = pre;
        if (first != null && root.val <= pre.val) second = root;
        pre = root;
        traversal(root.right);
    }
}

// Morris Traversal, constant space.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void recoverTree(TreeNode root) {
        TreeNode tmp = null;
        TreeNode first = null, second = null, pre = null;
        while (root != null) {
            if (root.left == null) {
                if (pre != null && pre.val > root.val) {
                    if (first == null) first = pre;
                    second = root;
                }
                pre = root;
                root = root.right;
            } else {
                tmp = root.left;
                while (tmp.right != null && tmp.right != root) tmp = tmp.right;
                if (tmp.right == null) {
                    tmp.right = root;
                    root = root.left;
                } else {
                    tmp.right = null;
                    if (pre != null && pre.val > root.val) {
                        if (first == null) first = pre;
                        second = root;
                    }
                    pre = root;
                    root = root.right;
                }
            }
        }
        if (first != null && second != null) {
            int k = first.val;
            first.val = second.val;
            second.val = k;
        }
    }
}
