/**

Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

"((()))", "(()())", "(())()", "()(())", "()()()"

*/

public class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> res = new ArrayList<String>();
        dfs(res, n, "", 0, 0);
        return res;
    }
    
    public void dfs(List<String> res, int n, String cur, int open, int close) {
        if (cur.length() == n * 2) {
            res.add(cur);
            return;
        }
        if (open < n) dfs(res, n, cur + "(", open + 1, close);
        if (close < open) dfs(res, n, cur + ")", open, close + 1);
    }
}
