/*

Given a string s, partition s such that every substring of the partition is a palindrome.

Return all possible palindrome partitioning of s.

For example, given s = "aab",
Return

  [
    ["aa","b"],
    ["a","a","b"]
  ]

*/

// Backtracking

public class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<List<String>>();
        List<String> current = new ArrayList<String>();
        dfs(s, result, current, 0);
        return result;
    }

    public void dfs(String s, List<List<String>> result, List<String> current, int pos) {
        if (pos == s.length() && current.size() > 0) result.add(new ArrayList<String>(current));
        else {
            for (int i = pos; i < s.length(); ++i) {
                if (isPal(s, pos, i)) {
                    current.add(s.substring(pos, i + 1));
                    dfs(s, result, current, i + 1);
                    current.remove(current.size() - 1);
                }
        }
    }

    public boolean isPal(String s, int low, int high) {
        while (low < high) if (s.charAt(low++) != s.charAt(high--)) return false;
        return true;
    }
}
