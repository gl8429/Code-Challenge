/**

Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [2, 3, 6, 7] and target 7,
A solution set is:
[
  [7],
  [2, 2, 3]
]

*/

public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> cur = new ArrayList<Integer>();
        helper(candidates, target, res, cur, 0, 0);
        return res;
    }

    public void helper(int[] candidates, int target, List<List<Integer>> res, List<Integer> cur, int val, int idx) {
        if (val > target) return;
        if (val == target) {
            res.add(new ArrayList<Integer>(cur));
            return;
        }
        for (int i = idx; i < candidates.length && target >= candidates[i] + val; i++) {
            cur.add(candidates[i]);
            helper(candidates, target, res, cur, val + candidates[i], i);
            cur.remove(cur.size() - 1);
        }
    }
}
