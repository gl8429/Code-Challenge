/**

Given a Binary Tree, find the deepest leaf node that is left child of its parent. 
For example, consider the following tree. 
The deepest left leaf node is the node with value 9.
The deepest right leaf node is the node with value 10.

       1
     /   \
    2     3
  /      /  \  
 4      5    6
        \     \
         7     8
        /       \
       9         10

*/

// O(n)

class Result {
    int height;
    TreeNode candidate;
    public Result(int height, TreeNode candidate) {
        this.height = height;
        this.candidate = candidate;
    }
}

        public Result findCommonAncestorOnePass(TreeNode root) {
            if (root == null) return new Result(0, null);
            Result left = findCommonAncestorOnePass(root.left);
            Result right = findCommonAncestorOnePass(root.right);
            if (left.candidate == null && right.candidate == null)
                return new Result(1, root);
            if (left.candidate != null && right.candidate != null) {
                if (left.height == right.height) return new Result(left.height + 1, root);
                else if (left.height > right.height) return new Result(left.height + 1, left.candidate);
                else return new Result(right.height + 1, right.candidate);
            }
            if (left.candidate == null) {
                return new Result(right.height + 1, right.candidate);
            } else {
                return new Result(left.height + 1, left.candidate);
            }
        }

// O(2n)



public class Solution {
	int maxLevel = 0;
	TreeNode left, right;

	public void deepestLeaf(TreeNode root, int level, boolean isLeft) {
		if (root == null) return;
		if (root.left == null && root.right == null && level > maxLevel) {
			if (isLeft) {
				left = root;
				maxLevel = level;
			} else {
				right = root;
				maxLevel = level;
			}
		}
		deepestLeaf(root.left, level + 1, true);
		deepestLeaf(root.right, level + 1, false);
	}

	public void find(TreeNode root) {
		if (root == null) return;
		deepestLeaf(root.left, 1, true);
		deepestLeaf(root.right, 1, false);
	}
}
