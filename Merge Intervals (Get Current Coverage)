
/**

实现一个class提供以下操作：
1. addInterval(int start, int end) - 加入一段interval
2. getTotalCoverage() - 返回总共能够cover的时间

*/

import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;

public class MergeIntervalCoverage {

    int coverage;
    List<Interval> intervals;

    public MergeIntervalCoverage() {
        this.coverage = 0;
        this.intervals = new ArrayList<>();
    }


    public void addInterval(int start, int end) {
        insert(new Interval(start, end));
    }

    public int getCoverage() {
        return coverage;
    }

    public void insert(Interval newInterval) {
        Interval cur;
        ListIterator<Interval> iter = intervals.listIterator();
        while (iter.hasNext()) {
            cur = iter.next();
            if (newInterval.end < cur.start) {

                // Notice: backwards one step and insert it.
                iter.previous();
                iter.add(newInterval);
                coverage += newInterval.end - newInterval.start;
                return;
            } else if (newInterval.start <= cur.end) {
                coverage -= cur.end - cur.start;
                newInterval.start = Math.min(newInterval.start, cur.start);
                newInterval.end = Math.max(newInterval.end, cur.end);
                iter.remove();
            }
        }
        intervals.add(newInterval);
    }
}

class Interval {
    int start;
    int end;

    Interval() {
        start = 0;
        end = 0;
    }

    Interval(int s, int e) {
        start = s;
        end = e;
    }
}
