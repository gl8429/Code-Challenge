/**

Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.


Example 1:

Input: k = 3, n = 7

Output:

[[1,2,4]]

Example 2:

Input: k = 3, n = 9

Output:

[[1,2,6], [1,3,5], [2,3,4]]

*/

public class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        int[] candidates = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> cur = new ArrayList<Integer>();
        dfs(k, n, cur, res, 0, candidates);
        return res;
    }

    public void dfs(int k, int n, List<Integer> cur, List<List<Integer>> res, int idx, int[] candidates) {
        if (n == 0 && cur.size() == k) {
            res.add(new ArrayList<Integer>(cur));
        }
        if (n > 0) {
            for (int i = idx; i < 9 && n >= candidates[i] && cur.size() < k; i++) {
                cur.add(candidates[i]);
                dfs(k, n - candidates[i], cur, res, i + 1, candidates);
                cur.remove(cur.size() - 1);
            }
        }
    }
}
