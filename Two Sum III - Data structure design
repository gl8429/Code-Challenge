/**

Design and implement a TwoSum class. It should support the following operations: add and find.

add - Add the number to an internal data structure.
find - Find if there exists any pair of numbers which sum is equal to the value.

For example,
add(1); add(3); add(5);
find(4) -> true
find(7) -> false

*/

// More find, less add

public class TwoSum {
    Set<Integer> num;
    Set<Integer> sum;
    
    public TwoSum() {
        sum = new HashSet<Integer>();
        num = new HashSet<Integer>();
    }

    // Add the number to an internal data structure.
	public void add(int number) {
	    if (num.contains(number)) sum.add(number * 2);
	    else {
	        Iterator<Integer> iter = num.iterator();
	        while (iter.hasNext()) sum.add(number + iter.next());
	        num.add(number);
	    }
	}

    // Find if there exists any pair of numbers which sum is equal to the value.
	public boolean find(int value) {
	    return sum.contains(value);
	}
}


// Your TwoSum object will be instantiated and called as such:
// TwoSum twoSum = new TwoSum();
// twoSum.add(number);
// twoSum.find(value);

// More add, less find

public class TwoSum {
    
    Map<Integer, Integer> map;
    List<Integer> array;
    
    public TwoSum() {
        map = new HashMap<Integer, Integer>();
        array = new ArrayList<Integer>();
    }

    // Add the number to an internal data structure.
	public void add(int number) {
	    if (map.containsKey(number)) map.put(number, 2);
	    else {
	        map.put(number, 1);
	        array.add(number);
	    }
	}

    // Find if there exists any pair of numbers which sum is equal to the value.
	public boolean find(int value) {
	    for (int i = 0; i < array.size(); i++) {
	        int num1 = array.get(i);
	        int num2 = value - num1;
	        if ((num1 == num2 && map.get(num1) > 1) || (num1 != num2 && map.containsKey(num2))) return true;
	    }
	    return false;
	}
}
