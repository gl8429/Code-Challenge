/*

Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
return
[
   [5,4,11,2],
   [5,8,4,5]
]

*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if (root == null) return result;
        helper(result, new ArrayList<Integer>(), root, sum, 0);
        return result;
    }
    
    private void helper(List<List<Integer>> result, List<Integer> path, TreeNode root, int sum, int current) {
        if (root == null) return;
        current += root.val;
        //List<Integer> newPath = new ArrayList<Integer>(path);
        path.add(root.val);
        //newPath.add(root.val);
        if (root.right == null && root.left == null) {
            if (current == sum) {
               result.add(new ArrayList<Integer>(path));
               //result.add(new ArrayList<Integer>(newPath));
               path.remove(path.size() - 1);
               return;
            }
        }
        helper(result, path, root.left, sum, current);
        //helper(result, newPath, root.left, sum, current);
        helper(result, path, root.right, sum, current);
        //helper(result, newPath, root.right, sum, current);
        path.remove(path.size() - 1);
    }
}
