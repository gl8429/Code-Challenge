/**

Given an unsorted array of integers, find the length of the longest consecutive elements sequence.

For example,
Given [100, 4, 200, 1, 3, 2],
The longest consecutive elements sequence is [1, 2, 3, 4]. Return its length: 4.

Your algorithm should run in O(n) complexity.

*/

// O(n)

public class Solution {
    public int longestConsecutive(int[] nums) {
        int res = 0;
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i = 0; i < nums.length; ++i) {
            if (!map.containsKey(nums[i])) {
                int left = (map.containsKey(nums[i] - 1)) ? map.get(nums[i] - 1) : 0;
                int right = (map.containsKey(nums[i] + 1)) ? map.get(nums[i] + 1) : 0;
                int sum = left + right + 1;
                map.put(nums[i], sum);
                res = Math.max(res, sum);
                map.put(nums[i] - left, sum);
                map.put(nums[i] + right, sum);
            }
            else continue;
        }
        return res;
    }
}

// Another solution, which is straight forward

public int longestConsecutive(int[] nums) {
            Set<Integer> set = new HashSet<>();
            for(int n : nums) {
                set.add(n);
            }
            int best = 0;
            for(int n : set) {
                if(!set.contains(n - 1)) {  // only check for one direction
                    int m = n + 1;
                    while(set.contains(m)) {
                        m++;
                    }
                    best = Math.max(best, m - n);
                }
            }
            return best;
        }
}
